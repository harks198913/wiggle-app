%% -*- erlang -*-

%% @doc Wiggle allows caching of objects, please be aware
%% that caching data will increase the chacne of stale data.
%% However it can increase performance significantly. Different
%% objects have different 'lifetimes' so different timeouts
%% apply. Setting the timeout to 0 will disable caching.
%%
%% However stale data served by wiggle does NOT mean stale data
%% within FiFo.
%%
%% Wiggle will automatically invalidate the cache when a action is taken
%% that means when someone changes a setting it should be directy reflectd.
%%
%% A two tier cache is used and works the following way:
%%
%% * Items requested within the timeframe of the L1 TTL will be served
%%   directly from the cache.
%% * Items requested within the timeframe of the L2 TTL are served
%%   from the cache once but invalidated and the cache asyncrounously
%%   updated.
%% * Itemsrequested after the L2 TTL are invalidated emediately and fetched
%%   anew.


%% @doc Enable or disable caching in global.
{mapping, "caching", "wiggle.caching",
 [{default, off},
  {datatype, flag}]}.

%% @doc The time how long permissions for a token are cached,
%% this seriously improves quick successive requests.
{mapping, "ttl.element.token.l1", "wiggle.token_ttl",
 [{default, "1s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.token.l2", "wiggle.token_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.token_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.token.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.token.l2", Conf),
         {L1, L2}
 end
}.

%% @doc Packages pretty much never change so a high TTL is possible.
{mapping, "ttl.element.package.l1", "wiggle.package_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.package.l2", "wiggle.package_ttl",
 [{default, "10m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.package_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.package.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.package.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.package.l1", "wiggle.package_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.package.l2", "wiggle.package_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.package_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.package.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.package.l2", Conf),
         {L1, L2}
 end
}.

%% @doc Datasets pretty much never change so a high TTL is possible.
{mapping, "ttl.element.dataset.l1", "wiggle.dataset_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.dataset.l2", "wiggle.dataset_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.dataset_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.dataset.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.dataset.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.dataset.l1", "wiggle.dataset_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.dataset.l2", "wiggle.dataset_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.dataset_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.dataset.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.dataset.l2", Conf),
         {L1, L2}
 end
}.

%% @doc DTrace Scripts pretty much never change so a high TTL is possible.
{mapping, "ttl.element.dtrace.l1", "wiggle.dtrace_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.dtrace.l2", "wiggle.dtrace_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.dtrace_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.dtrace.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.dtrace.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.dtrace.l1", "wiggle.dtrace_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.dtrace.l2", "wiggle.dtrace_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.dtrace_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.dtrace.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.dtrace.l2", Conf),
         {L1, L2}
 end
}.

%% @doc Chunter updates services every 10s by default setting the TTL
%% to X means stale service state will be 10s+X (i.e. 20s)
{mapping, "ttl.element.hypervisor.l1", "wiggle.hypervisor_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.hypervisor.l2", "wiggle.hypervisor_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.hypervisor_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.hypervisor.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.hypervisor.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.hypervisor.l1", "wiggle.hypervisor_list_ttl",
 [{default, "1s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.hypervisor.l2", "wiggle.hypervisor_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.hypervisor_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.hypervisor.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.hypervisor.l2", Conf),
         {L1, L2}
 end
}.


%% @doc IPranges only change when a Ip was claimed some delay is accaptable here
{mapping, "ttl.element.iprange.l1", "wiggle.iprange_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.iprange.l2", "wiggle.iprange_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.iprange_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.iprange.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.iprange.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.iprange.l1", "wiggle.iprange_list_ttl",
 [{default, "1s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.iprange.l2", "wiggle.iprange_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.iprange_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.iprange.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.iprange.l2", Conf),
         {L1, L2}
 end
}.


%% @doc Networks barely ever change
{mapping, "ttl.element.network.l1", "wiggle.network_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.network.l2", "wiggle.network_ttl",
 [{default, "10m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.network_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.network.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.network.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.network.l1", "wiggle.network_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.network.l2", "wiggle.network_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.network_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.network.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.network.l2", Conf),
         {L1, L2}
 end
}.

%% @doc Orgs barely ever change too

{mapping, "ttl.element.org.l1", "wiggle.org_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.org.l2", "wiggle.org_ttl",
 [{default, "10m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.org_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.org.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.org.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.org.l1", "wiggle.org_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.org.l2", "wiggle.org_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.org_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.org.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.org.l2", Conf),
         {L1, L2}
 end
}.


%% @doc Roles barely ever change too
{mapping, "ttl.element.role.l1", "wiggle.role_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.role.l2", "wiggle.role_ttl",
 [{default, "10m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.role_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.role.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.role.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.role.l1", "wiggle.role_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.role.l2", "wiggle.role_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.role_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.role.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.role.l2", Conf),
         {L1, L2}
 end
}.

%% @doc Users barely change either
{mapping, "ttl.element.user.l1", "wiggle.user_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.user.l2", "wiggle.user_ttl",
 [{default, "10m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.user_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.user.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.user.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.user.l1", "wiggle.user_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.user.l2", "wiggle.user_list_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.user_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.user.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.user.l2", Conf),
         {L1, L2}
 end
}.



%% @doc VMs can change rather frequently so we don't cache them by default
{mapping, "ttl.element.vm.l1", "wiggle.vm_ttl",
 [{default, "0.1s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.vm.l2", "wiggle.vm_ttl",
 [{default, "5s"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.vm_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.vm.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.vm.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.vm.l1", "wiggle.vm_list_ttl",
 [{default, "0.1s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.vm.l2", "wiggle.vm_list_ttl",
 [{default, "1s"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.vm_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.vm.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.vm.l2", Conf),
         {L1, L2}
 end
}.

%% @doc Groupings change sometimes so we can't have a long TTL
{mapping, "ttl.element.grouping.l1", "wiggle.grouping_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.element.grouping.l2", "wiggle.grouping_ttl",
 [{default, "1m"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.grouping_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.element.grouping.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.element.grouping.l2", Conf),
         {L1, L2}
 end
}.

{mapping, "ttl.list.grouping.l1", "wiggle.grouping_list_ttl",
 [{default, "1s"},
  {datatype, {duration, ms}}]}.

{mapping, "ttl.list.grouping.l2", "wiggle.grouping_list_ttl",
 [{default, "10s"},
  {datatype, {duration, ms}}]}.

{translation,
 "wiggle.grouping_list_ttl",
 fun(Conf) ->
         L1 = cuttlefish:conf_get("ttl.list.grouping.l1", Conf),
         L2 = cuttlefish:conf_get("ttl.list.grouping.l2", Conf),
         {L1, L2}
 end
}.
